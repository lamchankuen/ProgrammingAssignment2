{
    "contents" : "## Matrix inversion is usually a costly computation and their may be \n## some benefit to caching the inverse of a matrix rather than compute \n## it repeatedly. \n## A pair of functions that cache the inverse of a matrix.\n\n\n## This function creates a special \"matrix\" object that can cache \n## its inverse.\nmakeCacheMatrix <- function(x = matrix()) {\n  m <- NULL\n  \n  # set the values of the matrix\n  set <- function(y) {\n    x <<- y              \n    m <<- NULL\n  }\n  \n  # get the values of the matrix \n  get <- function() x\n  \n  # set the value of the inverse\n  setinverse <- function(inverse) m <<- inverse\n  \n  # get the value of the inverse \n  getinverse <- function() m\n  list(set = set, get = get,\n       setinverse = setinverse,\n       getinverse = getinverse)\n}\n\n\n##  This function computes the inverse of the special \"matrix\" \n##  returned by makeCacheMatrix above. If the inverse has already \n##  been calculated (and the matrix has not changed), then the \n##  cachesolve should retrieve the inverse from the cache.\ncacheSolve <- function(x, ...) {\n  ## Return a matrix that is the inverse of 'x'\n  m <- x$getinverse()\n  if(!is.null(m)) {\n    message(\"getting cached data\")\n    return(m)\n  }\n  data <- x$get()\n  m <- solve(data, ...)\n  x$setinverse(m)\n  m\n}\n",
    "created" : 1398407205328.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1290948723",
    "id" : "E0A33EBB",
    "lastKnownWriteTime" : 1398427215,
    "path" : "C:/Users/LCK/Desktop/Coursea/Data Science/2. R Programming/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}